#!/usr/bin/env node

var fs = require("fs"),
    commander = require("commander"),
    topojson = require("../");

commander
    .version(require("../package.json").version)
    .usage("[options] <name=file>…")
    .description("Convert TopoJSON objects to GeoJSON objects.")
    .option("-i, --in <file>", "input topology file name; defaults to “-” for stdin", "-")
    .option("-l, --list", "list the object names on the input topology")
    .option("-n, --newline-delimited", "output newline-delimited JSON")
    .parse(process.argv);

if (!commander.list === commander.args.length < 1) {
  commander.outputHelp();
  process.exit(1);
}

read(commander.in).then(write);

function read(file) {
  return new Promise(function(resolve, reject) {
    var data = [];
    readStream(file)
        .on("data", function(d) { data.push(d); })
        .on("end", function() { resolve(JSON.parse(Buffer.concat(data))); })
        .on("error", reject);
  });
}

function readStream(file) {
  return file === "-" ? process.stdin : fs.createReadStream(file);
}

function write(topology) {
  var write, writer = commander.newlineDelimited ? writeNewlineDelimitedFeature : writeFeature, name;
  if (commander.list) {
    for (name in topology.objects) {
      console.log(name);
    }
    return;
  }
  write = Promise.resolve();
  commander.args.forEach(function(specifier) {
    var i = specifier.indexOf("="),
        file = i >= 0 ? specifier.slice(i + 1) : specifier + ".json",
        name = i >= 0 ? specifier.slice(0, i) : specifier;
    if (!(name in topology.objects)) {
      console.error("error: object “" + name + "” not found");
      process.exit(1);
    }
    write = write.then(writer(file, topojson.feature(topology, topology.objects[name])));
  });
  return write;
}

function writeStream(file) {
  var stream = file === "-" ? process.stdout : fs.createWriteStream(file);

  stream.on("error", function(error) {
    if (error.code === "EPIPE" || error.errno === "EPIPE") {
      process.exit(0);
    }
  });

  return stream;
}

function writeFeature(file, feature) {
  return new Promise(function(resolve, reject) {
    writeStream(file).on("error", reject)[file === "-" ? "write" : "end"](JSON.stringify(feature), function(error) {
      if (error) reject(error);
      else resolve();
    });
  });
}

function writeNewlineDelimitedFeature(file, feature) {
  return feature == null || feature.type != "FeatureCollection" ? writeFeature(file, feature) : new Promise(function(resolve, reject) {
    var stream = writeStream(file).on("error", reject), i = -1, n = feature.features.length;

    (function writeNext(error) {
      if (error) return void reject(error);
      if (++i >= n) {
        if (file !== "-") stream.end(writeEnd);
        else writeEnd();
      } else {
        stream.write(JSON.stringify(feature.features[i]) + "\n", writeNext);
      }
    })(null);

    function writeEnd(error) {
      if (error) return void reject(error);
      resolve();
    }
  });
}
